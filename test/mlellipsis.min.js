Element.prototype.getText = function() { if (this.innerText == undefined) { return this.textContent; } else { return this.innerText; } };
Element.prototype.setText = function(a) { if (this.innerText == undefined) { this.textContent = a || ""; } else { this.innerText = a || ""; } };
Element.prototype.getFinalStyle = function(c, b) { var a; if (window.getComputedStyle) { a = window.getComputedStyle(this, null)[c]; } else { a = this.currentStyle[c]; } if (b != undefined) { a = a * b + "px"; } return a.substring(0, a.toString().length - 2); };
Element.prototype.mlellipsis = function(g) { var f = this.getText(); var e = this.getAttribute("title"); if (e == null) { this.setAttribute("title", f); } else { this.setText(e); } var d = this.getFinalStyle("fontSize"); if (/msie/i.test(navigator.userAgent)) { var b = this.getFinalStyle("lineHeight", d); } else { var b = this.getFinalStyle("lineHeight"); } var a = this.clientHeight; if (b == "norm") { b = Number(d * 1.5);
        this.setAttribute("style", "line-height:" + b + "px"); } else { b = Number(b); } var c = Math.floor(g * b); if (a >= c) { f = this.getText(); while (c * 3 < this.clientHeight) { this.setText(f.substring(0, f.length / 2));
            f = this.getText(); } while (c < this.clientHeight) { f = this.getText();
            this.setText(f.replace(/(\s)*([a-zA-Z0-9]+|\W)(\.\.\.)?$/, "...")); } } };